name: Run Tests

on:
  workflow_dispatch: {}
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  ############################################
  # FRONTEND – Expo / Jest
  ############################################
  frontend-tests:
    name: Expo / Jest
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mobile
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install NPM dependencies
        run: |
          cd mobile
          npm ci
          npm install --no-save @testing-library/react-native

      - name: Run Jest with coverage
        run: npx jest --ci --coverage --runInBand

      - name: Upload front-end coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: mobile/coverage



  ############################################
  # BACKEND – Django / Pytest
  ############################################
  backend-tests:
    name: Django / Pytest
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ["5432:5432"]
    env:
      DJANGO_ENV: test
      DJANGO_SETTINGS_MODULE: config.settings.test
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      USE_DOCKER: ${{ secrets.USE_DOCKER }}
      CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
      SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      DJANGO_AWS_ACCESS_KEY_ID: dummy
      DJANGO_AWS_SECRET_ACCESS_KEY: dummy
      DJANGO_AWS_STORAGE_BUCKET_NAME: dummy
      DJANGO_AWS_S3_REGION_NAME: dummy
      DJANGO_AWS_S3_CUSTOM_DOMAIN: dummy
      MAILGUN_API_KEY: dummy
      MAILGUN_DOMAIN: dummy
      MAILGUN_API_URL: dummy
      DJANGO_ADMIN_URL: dummy
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_STORAGE_BUCKET_NAME: dummy
    defaults:
      run:
        working-directory: backend/sep2025_project_team_004
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432; do echo "⏳ waiting for postgres…"; sleep 1; done

      - name: Check for missing migrations
        run: python manage.py makemigrations --check --dry-run

      - name: Apply migrations
        run: python manage.py migrate --noinput

      - name: Run pytest with coverage
        run: pytest --ds=config.settings.test --nomigrations --cov=sep2025_project_team_004 --cov-config=.coveragerc --cov-report=xml --cov-report=term-missing --cov-fail-under=40

      - name: Upload back-end coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml\
          
      - name: DEBUG – show env var is present
        run: |
          echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:+<present>}"
